<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:resources/shiro.properties" ignore-unresolvable="true"/>

    <!-- shiro过滤器:web.xml文件中shiroFilter过滤器对应的bean, 该过滤器的名字必须是shiroFilter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录页面, 没有登录的用户请求需要登录的页面时自动跳转到登录页面, 不是必须属性, 没有该属性会自动寻找web项目
             根目录下面login.jsp -->
        <property name="loginUrl" value="${shiro.login.url}"/>
        <property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}"/>
        <!-- 自定义的filter:将自定义的filter注入到shiroFilter中 -->
        <property name="filters">
            <util:map>
                <!-- 表单认证过滤器 -->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <!-- 登出过滤器 -->
                <entry key="logout" value-ref="logoutFilter"/>
            </util:map>
        </property>
        <!-- 过滤器链定义, 从上向下顺序执行, 一般讲/**放在最下边, authc表示需要认证才能访问 -->
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon
                /upload/** = anon
                /login/login.html = authc
                /login/** = anon
                /logout = logout
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 安全管理器securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <!-- 注入会话管理器: 这里使用shiro默认的回话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 注入记住我管理器 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- realm身份认证系统: 用于授权和认证 -->
    <bean id="userRealm" class="com.wechat.cs.modules.sys.shiro.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!-- 密码匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!-- 加密算法 -->
        <property name="hashAlgorithmName" value="MD5"/>
        <!-- 密码加密次数 -->
        <property name="hashIterations" value="2"/>
    </bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager"/>
    </bean>

    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:resources/ehcache.xml"/>
        <property name="shared" value="true"/>
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 是否在url上写JSESSIONID -->
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
        <!-- session的失效时长, 单位是毫秒, 这里设置全局回话的超时时间为10分钟 -->
        <property name="globalSessionTimeout" value="${shiro.global.session.timeout}"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 开启会话验证调度器 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 验证会话是否有效 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <!-- 会话验证调度器：防止web环境中用户不进行登出操作时的回话超时问题 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 回话验证调度器执行的时间, 每10分钟执行一次, 跟session的失效时间保持一致 -->
        <property name="interval" value="${shiro.global.session.timeout}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- sessionDAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- sessionId生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 记住我管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 使用formAuthenticationFilter 验证过滤器 -->
    <!--<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">-->
    <bean id="formAuthenticationFilter" class="com.wechat.cs.core.filter.FormAuthenticationFilter">
        <!-- 表单提交的用户名参数名称 -->
        <property name="usernameParam" value="username"/>
        <!-- 表单提交的密码参数名称 -->
        <property name="passwordParam" value="password"/>
        <!-- 表单提交的自动登录参数名称 -->
        <property name="rememberMeParam" value="rememberMe"/>
        <!-- 认证成功后跳转的url -->
        <!--<property name="successUrl" value="${shiro.default.success.url}"/>-->
    </bean>

    <!-- 退出登录过滤器 -->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${shiro.logout.success.url}"/>
    </bean>

    <!-- 记住我的cookie模板 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.rememeberMe.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/>
    </bean>
    
  	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager), 是一个单例模式, 可以在任何情况下使用SecurityUtils.*下面的方法 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

    <!-- 这个bean用来管理shiro Bean的生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 该配置依赖于 lifecycleBeanPostProcessor, 所以必须在lifecycleBeanPostProcessor注册之后创建-->
    <bean id="annotationProxy" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
</beans>