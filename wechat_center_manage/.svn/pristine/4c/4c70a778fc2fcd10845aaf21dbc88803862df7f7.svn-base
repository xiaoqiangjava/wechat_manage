package com.wechat.cs.modules.sys.service.login.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.wechat.cs.core.cache.IMemcachedManager;
import com.wechat.cs.core.common.constant.RedisConstants;
import com.wechat.cs.core.utils.StringUtils;
import com.wechat.cs.modules.sys.entity.login.UserInfoBean;
import com.wechat.cs.modules.sys.dao.login.UserMapper;
import com.wechat.cs.modules.sys.service.login.IUserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;

/**
 * Created byxq on 2018/1/25.
 * 用户相关业务层实现类
 */
@Service("userService")
public class UserServiceImpl implements IUserService {
    private final static Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);
    @Resource
    private UserMapper userMapper;

    @Autowired
    private IMemcachedManager busiCache;

    @Override
    public List<Map<String, Object>> findPermissionsByusername(String username) {
        List<Map<String, Object>> menuLists = (List<Map<String, Object>>) busiCache.get(username + "permission");
        if (StringUtils.isEmpty(menuLists)) {
            List<Map<String, Object >> permissionList = userMapper.findPermissionsByusername(username);
            if (StringUtils.isNotEmpty(permissionList)) {
                for (Map<String, Object> permission : permissionList) {
                    String parentId = String.valueOf(permission.get("parent_id"));
                    List<Map<String, String>> subMenus = userMapper.findMenusByusername(username, parentId);
                    permission.put("subMenus", subMenus);
                }
                menuLists = permissionList;
                busiCache.add(username + "permission", menuLists, RedisConstants.USER_PERMISSION_TIMES);
            }
        }
        return menuLists;
    }

    @Override
    public int updateUserInfoByUsername(String username, String password) {
        return userMapper.updateUserInfoByUsername(username, password);
    }

    @Override
    public UserInfoBean findByUsername(String username) {
        return userMapper.findByUsername(username);
    }

    @Override
    public int delUser(String username) {
        return userMapper.delUser(username);
    }

    @Override
    public int deleteSerial(List<String> userList) {
        return userMapper.deleteSerial(userList);
    }

    @Override
    public List<Map<String, Object>> findAllUser(PageInfo pageInfo, Map<String, String> param) {
        if (pageInfo != null) {
            PageHelper.startPage(pageInfo.getPageNum(), pageInfo.getPageSize());
        }
        return userMapper.findAllUser(param);
    }
}
